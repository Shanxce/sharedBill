package com.rolnan.sharedbill;

import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.rolnan.sharedbill.domain.assetsInfo;
import com.rolnan.sharedbill.domain.userInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.converter.json.MappingJacksonValue;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.mail.SimpleMailMessage;

import javax.servlet.http.HttpServletRequest;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.*;


@Controller // This means that this class is a Controller
@RequestMapping(path = "/api/user") // This means URL's start with /demo (after Application path)
public class userControl {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private com.rolnan.sharedbill.controller.userRepository userRepository;
    @Autowired
    private com.rolnan.sharedbill.controller.billRepository billRepository;
    @Autowired
    private com.rolnan.sharedbill.controller.assetsRepository assetsRepository;

    private static final Logger logger = LoggerFactory.getLogger(userControl.class);

    @Autowired
    private JavaMailSender javaMailSender;

    @Value("${spring.mail.username}")
    private String mailFrom;

    class CaptchaData {
        public LocalDateTime time;
        public String captcha;

        CaptchaData(LocalDateTime time) {
            this.time = time;
        }

        public void setCaptcha(String captcha) {
            this.captcha = captcha;
        }
    }

    private HashMap<String, CaptchaData> captchaSet = new HashMap<>();

    @PostMapping(path = "/login")
    public @ResponseBody
    returnMsg login(@RequestParam String username
            , @RequestParam String passwd, HttpServletRequest request) {
        // This returns a JSON or XML with the users

        List<userInfo> data = userRepository.findByUserPhoneOrUserMail(username, username);
//        return new returnMsg(313,"用户或密码错误",data);
        if (data.isEmpty())
            return new returnMsg(313, "账号错误", null);
        else if (!data.get(0).getPasswd().equals(passwd))
            return new returnMsg(313, "密码错误", null);

        request.getSession().setAttribute("UserId", data.get(0).getId());
        request.getSession().setAttribute("UserName", data.get(0).getName());

        logger.info("{} {} 登陆成功", data.get(0).getId(), data.get(0).getName());
        return new returnMsg(200, "登陆成功", request.getSession().getAttribute("UserId"));
    }

    @PostMapping(path = "/register") // Map ONLY POST Requests
    public @ResponseBody
    returnMsg addNewUser(@RequestParam String username,
                         @RequestParam String phone,
                         @RequestParam String mail,
                         @RequestParam(defaultValue = "2") Integer permission,
                         @RequestParam String passwd,
                         @RequestParam String captcha) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        CaptchaData d = captchaSet.get(mail);
        if (d == null || ChronoUnit.MINUTES.between(d.time, LocalDateTime.now()) >= 10 || !d.captcha.equals(captcha)) {
            logger.error("验证码错误");
            return new returnMsg(310, "验证码错误", null);
        }

        List<userInfo> data = userRepository.findByUserPhone(phone);

        if (!data.isEmpty()) {
            logger.error("手机号已存在");
            return new returnMsg(312, "手机号已存在", null);
        }

        data = userRepository.findByUserMail(mail);
        if (!data.isEmpty()) {
            logger.error("邮箱已存在");
            return new returnMsg(311, "邮箱已存在", null);
        }

        userInfo n = new userInfo();
        n.setName(username);
        n.setPhone(phone);
        n.setMail(mail);
        n.setPermission(permission);
        n.setPasswd(passwd);

        userRepository.save(n);

        assetsInfo m = new assetsInfo();
        m.setName("未分类资产");
        m.setNumber(0.0);
        m.setUserid(n.getId());
        m.setTrash(true);
        assetsRepository.save(m);

        logger.info("user register success");
        return new returnMsg(200, "Saved", null);
    }

    @PostMapping(path = "/sendMail")
    public @ResponseBody
    returnMsg sendMail(@RequestParam String mail) {
        CaptchaData d = captchaSet.get(mail);
        if (d != null && ChronoUnit.MINUTES.between(d.time, LocalDateTime.now()) < 1) {
            return new returnMsg(320, String.format("邮件已发送，请%d秒后再尝试", 60 - ChronoUnit.SECONDS.between(d.time, LocalDateTime.now())), null);
        }

        captchaSet.put(mail, new CaptchaData(LocalDateTime.now()));

        Random gen = new Random();
        byte[] token = new byte[6];
        gen.nextBytes(token);
        String cur_cap = Base64.getUrlEncoder().withoutPadding().encodeToString(token);

        SimpleMailMessage msg = new SimpleMailMessage();
        msg.setFrom(mailFrom);
        msg.setTo(mail);
        msg.setSubject("Shared Bill共享账本 - 邮箱验证码");
        msg.setText(String.format("验证码为：%s\n-----------------------------\n验证码10分钟内有效\n您正在进行修改密码，如非您本人操作，建议立即修改密码", cur_cap));
        javaMailSender.send(msg);

        logger.info("send mail to {} with captcha {} success", mail, cur_cap);

        captchaSet.get(mail).setCaptcha(cur_cap);
        return new returnMsg(200, "邮件发送成功", null);
    }

    @GetMapping(path = "/logout")
    public @ResponseBody
    String logout(HttpServletRequest request) {
        // This returns a JSON or XML with the users

        request.getSession().setAttribute("UserId", null);
        return "logout";
    }


    @GetMapping(path = "/getMyInfo")
    public @ResponseBody
    MappingJacksonValue getMyInfo(HttpServletRequest request) {

        Integer id = (Integer) (request.getSession().getAttribute("UserId"));

        SimpleBeanPropertyFilter simpleBeanPropertyFilter =
                SimpleBeanPropertyFilter.filterOutAllExcept("id", "name", "phone", "mail");
        FilterProvider filterProvider = new SimpleFilterProvider().
                addFilter("userFilter", simpleBeanPropertyFilter);
        returnMsg res = new returnMsg(200, "ha", userRepository.findByUserId(id).get(0));
        MappingJacksonValue mappingJacksonValue = new MappingJacksonValue(res);
        mappingJacksonValue.setFilters(filterProvider);
        return mappingJacksonValue;
    }


    @PostMapping(path = "/modify") // Map ONLY POST Requests
    public @ResponseBody
    returnMsg userInfoModify(@RequestParam String newname,
                             @RequestParam String passwd,
                             @RequestParam String newpasswd,
                             HttpServletRequest request) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Integer id = (Integer) (request.getSession().getAttribute("UserId"));
        List<userInfo> data = userRepository.findByUserId(id);
        userInfo n = data.get(0);

        if (!n.getPasswd().equals(passwd))
            return new returnMsg(313, "密码错误", null);
        if (n.getPasswd().equals(newpasswd))
            return new returnMsg(314, "新密码与原密码相同", null);
        if (newpasswd!="" && newpasswd!=null)
            n.setPasswd(newpasswd);
        n.setName(newname);
        userRepository.save(n);

        logger.info("user info modify success");
        return new returnMsg(200, "success", null);
    }

    @GetMapping(path = "/getBills")
    public @ResponseBody
    returnMsg getBills(HttpServletRequest request) {

        Integer userid = (Integer) (request.getSession().getAttribute("UserId"));
//        billRepository.findBill(userid);
//        @Query("SELECT e from Employee e where e.employeeName = :name ")
//        Page<Employee> findByName(@Param("name") String name, Pageable pageable);
        HashMap<String, Object> ret = new HashMap<>();
        ret.put("bills", billRepository.findBill(userid));
        return new returnMsg(200, "ha", ret);
    }

    @GetMapping(path = "/getBillsTest")
    public @ResponseBody
    returnMsg getBillsTest() {
        HashMap<String, Object> ret = new HashMap<>();
        ret.put("bills", billRepository.findBill(1));
        return new returnMsg(200, "ha", ret);
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    MappingJacksonValue getAllUsers() {
        // This returns a JSON or XML with the users

        SimpleBeanPropertyFilter simpleBeanPropertyFilter =
                SimpleBeanPropertyFilter.serializeAll();
        FilterProvider filterProvider = new SimpleFilterProvider().
                addFilter("userFilter", simpleBeanPropertyFilter);
        returnMsg res = new returnMsg(200, "ha", userRepository.findAll());
        MappingJacksonValue mappingJacksonValue = new MappingJacksonValue(res);
        mappingJacksonValue.setFilters(filterProvider);

        return mappingJacksonValue;
    }

    @GetMapping(path = "/test")
    public @ResponseBody
    returnMsg test(HttpServletRequest request) {
        // This returns a JSON or XML with the users

        return new returnMsg(200, "test", request.getSession().getAttribute("UserId"));

    }

}